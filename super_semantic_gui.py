#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Super Semantic GUI - Interaktive Oberfl√§che f√ºr die Magie ‚ú®
"""

import tkinter as tk
from tkinter import ttk, filedialog, messagebox, scrolledtext
import threading
from pathlib import Path
import json
from datetime import datetime
import logging
from typing import Optional, Dict, Any

from super_semantic_processor import SuperSemanticProcessor, process_everything

# Setup Logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


class SuperSemanticGUI:
    """GUI f√ºr den Super Semantic Processor"""
    
    def __init__(self):
        self.root = tk.Tk()
        self.root.title("üåü Super Semantic Processor - Chat-Magie")
        self.root.geometry("900x700")
        
        # Style
        style = ttk.Style()
        style.theme_use('clam')
        
        # Variablen
        self.whatsapp_path = tk.StringVar()
        self.transcript_path = tk.StringVar()
        self.output_path = tk.StringVar(value="super_semantic_output.json")
        self.processing = False
        
        self._create_widgets()
        
    def _create_widgets(self):
        """Erstelle GUI-Elemente"""
        
        # Header
        header_frame = ttk.Frame(self.root, padding="10")
        header_frame.grid(row=0, column=0, sticky="ew")
        
        title = ttk.Label(
            header_frame, 
            text="üåü Super Semantic Processor", 
            font=('Arial', 20, 'bold')
        )
        title.pack()
        
        subtitle = ttk.Label(
            header_frame,
            text="Verwandle deine Chats in semantische Kunstwerke",
            font=('Arial', 12)
        )
        subtitle.pack()
        
        # Hauptbereich
        main_frame = ttk.Frame(self.root, padding="10")
        main_frame.grid(row=1, column=0, sticky="nsew")
        
        # Input-Sektion
        input_frame = ttk.LabelFrame(main_frame, text="üì• Eingabe-Dateien", padding="10")
        input_frame.pack(fill="x", pady=10)
        
        # Chat-Export
        wa_frame = ttk.Frame(input_frame)
        wa_frame.pack(fill="x", pady=5)
        
        ttk.Label(wa_frame, text="Chat-Export (TXT):").pack(side="left", padx=5)
        ttk.Entry(wa_frame, textvariable=self.whatsapp_path, width=50).pack(side="left", padx=5)
        ttk.Button(
            wa_frame, 
            text="üìÅ Durchsuchen",
            command=self._browse_whatsapp
        ).pack(side="left")
        
        # Transkript-Ordner
        trans_frame = ttk.Frame(input_frame)
        trans_frame.pack(fill="x", pady=5)
        
        ttk.Label(trans_frame, text="Transkript-Ordner:").pack(side="left", padx=5)
        ttk.Entry(trans_frame, textvariable=self.transcript_path, width=50).pack(side="left", padx=5)
        ttk.Button(
            trans_frame, 
            text="üìÅ Durchsuchen",
            command=self._browse_transcripts
        ).pack(side="left")
        
        # Output-Sektion
        output_frame = ttk.LabelFrame(main_frame, text="üíæ Ausgabe", padding="10")
        output_frame.pack(fill="x", pady=10)
        
        out_frame = ttk.Frame(output_frame)
        out_frame.pack(fill="x", pady=5)
        
        ttk.Label(out_frame, text="Ausgabe-Datei:").pack(side="left", padx=5)
        ttk.Entry(out_frame, textvariable=self.output_path, width=50).pack(side="left", padx=5)
        ttk.Button(
            out_frame, 
            text="üìÅ Speichern als",
            command=self._browse_output
        ).pack(side="left")
        
        # Optionen
        options_frame = ttk.LabelFrame(main_frame, text="‚öôÔ∏è Optionen", padding="10")
        options_frame.pack(fill="x", pady=10)
        
        self.use_markers = tk.BooleanVar(value=True)
        self.use_emotion = tk.BooleanVar(value=True)
        self.use_cosd = tk.BooleanVar(value=True)
        
        ttk.Checkbutton(
            options_frame, 
            text="üè∑Ô∏è FRAUSAR Marker verwenden",
            variable=self.use_markers
        ).pack(anchor="w")
        
        ttk.Checkbutton(
            options_frame, 
            text="üé≠ Emotionale Analyse",
            variable=self.use_emotion
        ).pack(anchor="w")
        
        ttk.Checkbutton(
            options_frame, 
            text="üåä CoSD/MARSAP Drift-Analyse",
            variable=self.use_cosd
        ).pack(anchor="w")
        
        # Prozess-Button
        self.process_btn = ttk.Button(
            main_frame,
            text="‚ú® Magie starten!",
            command=self._start_processing,
            style="Accent.TButton"
        )
        self.process_btn.pack(pady=20)
        
        # Progress
        self.progress = ttk.Progressbar(main_frame, mode='indeterminate')
        self.progress.pack(fill="x", pady=5)
        
        # Log-Bereich
        log_frame = ttk.LabelFrame(main_frame, text="üìã Verarbeitungs-Log", padding="10")
        log_frame.pack(fill="both", expand=True, pady=10)
        
        self.log_text = scrolledtext.ScrolledText(log_frame, height=10, wrap=tk.WORD)
        self.log_text.pack(fill="both", expand=True)
        
        # Status-Bar
        self.status_var = tk.StringVar(value="Bereit")
        status_bar = ttk.Label(self.root, textvariable=self.status_var, relief="sunken")
        status_bar.grid(row=2, column=0, sticky="ew")
        
        # Grid-Konfiguration
        self.root.columnconfigure(0, weight=1)
        self.root.rowconfigure(1, weight=1)
        
    def _browse_whatsapp(self):
        """Chat-Export-Textdatei ausw√§hlen"""
        filename = filedialog.askopenfilename(
            title="Chat-Export ausw√§hlen",
            filetypes=[("Text files", "*.txt"), ("All files", "*.*")]
        )
        if filename:
            self.whatsapp_path.set(filename)
            
    def _browse_transcripts(self):
        """Transkript-Ordner ausw√§hlen"""
        dirname = filedialog.askdirectory(title="Transkript-Ordner ausw√§hlen")
        if dirname:
            self.transcript_path.set(dirname)
            
    def _browse_output(self):
        """Ausgabe-Datei festlegen"""
        filename = filedialog.asksaveasfilename(
            title="Ausgabe-Datei speichern als",
            defaultextension=".json",
            filetypes=[("JSON files", "*.json"), ("All files", "*.*")]
        )
        if filename:
            self.output_path.set(filename)
            
    def _log(self, message: str):
        """F√ºge Nachricht zum Log hinzu"""
        timestamp = datetime.now().strftime("%H:%M:%S")
        self.log_text.insert(tk.END, f"[{timestamp}] {message}\n")
        self.log_text.see(tk.END)
        self.root.update()
        
    def _start_processing(self):
        """Starte Verarbeitung in separatem Thread"""
        if self.processing:
            messagebox.showwarning("Warnung", "Verarbeitung l√§uft bereits!")
            return
            
        # Validierung
        if not self.whatsapp_path.get() and not self.transcript_path.get():
            messagebox.showerror("Fehler", "Bitte mindestens eine Eingabe-Quelle w√§hlen!")
            return
            
        if not self.output_path.get():
            messagebox.showerror("Fehler", "Bitte Ausgabe-Datei festlegen!")
            return
            
        # Starte Thread
        thread = threading.Thread(target=self._process)
        thread.daemon = True
        thread.start()
        
    def _process(self):
        """F√ºhre Verarbeitung durch"""
        self.processing = True
        self.process_btn.config(state="disabled")
        self.progress.start()
        self.status_var.set("Verarbeitung l√§uft...")
        
        try:
            self._log("üöÄ Starte Super Semantic Processing...")
            
            # Erstelle Processor
            processor = SuperSemanticProcessor()
            
            # Verarbeite Chat-Export wenn vorhanden
            if self.whatsapp_path.get():
                wa_path = Path(self.whatsapp_path.get())
                if wa_path.exists():
                    self._log(f"üì± Verarbeite Chat-Export: {wa_path.name}")
                    result = processor.process_chat_export(wa_path)
                    self._log(
                        f"‚úÖ {result['processed']} Nachrichten & Medien verarbeitet"
                    )
                else:
                    self._log("‚ö†Ô∏è Chat-Export nicht gefunden!")
                    
            # Verarbeite Transkripte wenn vorhanden
            if self.transcript_path.get():
                trans_path = Path(self.transcript_path.get())
                if trans_path.exists():
                    self._log(f"üé§ Verarbeite Transkripte aus: {trans_path.name}")
                    result = processor.process_audio_transcripts(trans_path)
                    self._log(f"‚úÖ {result['processed']} Audio-Transkripte verarbeitet")
                else:
                    self._log("‚ö†Ô∏è Transkript-Ordner nicht gefunden!")
                    
            # Generiere Output
            self._log("üîÆ Analysiere semantische Strukturen...")
            output_path = Path(self.output_path.get())
            
            # F√ºhre Analysen durch
            processor.analyze_relationships()
            self._log(f"üîó {len(processor.relationships)} Beziehungen gefunden")
            
            processor.identify_semantic_threads()
            self._log(f"üßµ {len(processor.semantic_threads)} semantische F√§den identifiziert")
            
            processor.calculate_emotional_arc()
            if processor.emotional_arc:
                self._log(f"üìà Emotionaler Verlauf: {processor.emotional_arc.overall_trend}")
            
            # Generiere Datei
            self._log("üíæ Erstelle Super-Semantic-File...")
            result = processor.generate_super_semantic_file(output_path)
            
            self._log("‚ú® FERTIG! Magie vollbracht!")
            self._log(f"üìÑ Ausgabe gespeichert: {output_path}")
            self._log(f"üìÑ Zusammenfassung: {output_path.with_suffix('.summary.md')}")
            
            # Zeige Statistiken
            stats = result['analysis_summary']
            self._log("\nüìä STATISTIKEN:")
            self._log(f"  - Nachrichten: {result['metadata']['total_messages']}")
            self._log(f"  - Marker gefunden: {stats['marker_statistics']['total_markers_found']}")
            self._log(f"  - Emotionale Valenz: {stats['emotional_statistics']['average_valence']:.2f}")
            self._log(f"  - Semantische F√§den: {stats['thread_statistics']['total_threads']}")
            
            self.status_var.set("‚úÖ Erfolgreich abgeschlossen!")
            
            # Frage ob √∂ffnen
            if messagebox.askyesno("Erfolg", "Verarbeitung abgeschlossen!\n\nM√∂chten Sie die Zusammenfassung √∂ffnen?"):
                import webbrowser
                webbrowser.open(str(output_path.with_suffix('.summary.md')))
                
        except Exception as e:
            self._log(f"‚ùå FEHLER: {str(e)}")
            logger.exception("Fehler bei Verarbeitung")
            self.status_var.set("‚ùå Fehler aufgetreten")
            messagebox.showerror("Fehler", f"Fehler bei Verarbeitung:\n{str(e)}")
            
        finally:
            self.processing = False
            self.process_btn.config(state="normal")
            self.progress.stop()
            
    def run(self):
        """Starte GUI"""
        self.root.mainloop()


def main():
    """Hauptfunktion"""
    gui = SuperSemanticGUI()
    gui.run()


if __name__ == "__main__":
    main() 